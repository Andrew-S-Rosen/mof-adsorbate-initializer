Open Metal Detection
====================
In the previous examples, we manually specified the desired adsorption site via the ``site_idx`` argument to :func:`~mai.adsorbate_constructor.adsorbate_constructor.get_adsorbate`. In practice, it is often desirable to have an automated approach for determining which atom in a MOF is the desired adsorption site. By default, if the user does not specify ``site_idx``, MAI will assume that you want an automated approach for determining this parameter. By default, MAI will attempt to read in the results from the OpenMetalDetector_ (OMD) code, which can be used to output information about the number, type, and properties of various open metal sites in a set of MOFs. Instructions for using OMD can be found elsewhere_, but the main idea is to call OMD prior to calling MAI. An example is shown below for adding an O atom adsorbate to a bunch of MOFs stored in your current working directory.

.. literalinclude:: _static/auto_oms.py

You can see that this workflow is nearly identical to that in the monatomics tutorial, except we did not specify ``site_idx`` in :func:`~mai.adsorbate_constructor.adsorbate_constructor.get_adsorbate`, and we ran OMD's ``MofCollection.from_folder()`` command prior to calling MAI's :class:`~mai.adsorbate_constructor.adsorbate_constructor`. Generally, the only arguments you'll need to provide to ``MofCollection.from_folder()`` is the ``collection_folder`` and ``analysis_folder``, which is where the CIF files are located and where you'd like to store the OMD results, respectively. Then, you'll run OMD's ``analyse_mofs()`` command to run the analysis. From there, you're ready to run MAI as usual! The only new MAI-related keyword is that :func:`~mai.adsorbate_constructor.adsorbate_constructor.get_adsorbate` can take an ``omd_path`` keyword argument, which should be the same path as OMD's ``analysis_folder``. This just tells MAI where the OMD data is located.

.. _OpenMetalDetector: https://github.com/emmhald/open_metal_detector
.. _elsewhere: https://github.com/emmhald/open_metal_detector
